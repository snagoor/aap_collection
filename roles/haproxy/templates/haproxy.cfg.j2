#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
	log                 	global
	retries             	3
	timeout http-request	10s
	timeout queue       	1m
	timeout connect     	10s
	timeout client      	1m
	timeout server      	1m
	timeout http-keep-alive 10s
	timeout check       	10s
	maxconn             	3000

listen stats
    bind :9000
    mode http
    option forwardfor       except 127.0.0.0/8
    stats enable
    stats uri /
    stats refresh 3s

#https
frontend https
   bind *:443
   mode tcp
   option tcplog
   default_backend https_aapctrl

backend https_aapctrl
   option tcp-check
   balance source
{% for host in groups['controllers'] %}
   server aapctrl{{ loop.index }} {{ host }}:443 check
{% endfor %}

#http
frontend http
   bind *:80
   mode tcp
   option tcplog
   default_backend http_aapctrl

backend http_aapctrl
   option tcp-check
   balance roundrobin
{% for host in groups['controllers'] %}
   server aapctrl{{ loop.index }} {{ host }}:80 check
{% endfor %}
