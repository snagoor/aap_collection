---
# tasks file for freeipa
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Installing RHEL8 IDM server module
  ansible.builtin.dnf:
    name: "@idm:DL1/server"
    state: present
  when: ansible_distribution_major_version is version('8', '=')

- name: Installing RHEL8 IDM DNS module
  ansible.builtin.dnf:
    name: "@idm:DL1/dns"
    state: present
  when:
    - freeipa_setup_dns
    - ansible_distribution_major_version is version('8', '=')

- name: Installing required packages for FreeIPA Server
  ansible.builtin.dnf:
    name: "{{ freeipa_packages }}"
    state: present

- name: Installing FreeIPA DNS packages
  ansible.builtin.dnf:
    name: "{{ freeipa_dns_packages }}"
    state: present
  when: freeipa_setup_dns

- name: Ensure time is properly synced
  ansible.builtin.command: bash -c "chronyd -Q -d 'server {{ time_source }} iburst'"
  changed_when: false

- name: Generating entropy using rngd utility
  ansible.builtin.command: rngd -r /dev/urandom
  changed_when: false

- name: Enable and start chronyd service
  ansible.builtin.service:
    name: "chronyd"
    state: started
    enabled: yes

- name: Allowing required ports in firewalld
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop: "{{ firewalld_services }}"
  when: "'firewalld' in ansible_facts['packages']"

- name: Allow DNS service in firewalld
  ansible.posix.firewalld:
    service: "dns"
    permanent: true
    immediate: true
    state: enabled
  when:
    - freeipa_setup_dns
    - "'firewalld' in ansible_facts['packages']"

- name: Detect FreeIPA installation
  ansible.builtin.command: bash -c "ipactl status"
  register: ipa_installation
  changed_when: false
  failed_when: false
  tags: install

- name: Uninstall FreeIPA if previous installation found
  ansible.builtin.command: bash -c "ipa-server-install -U --uninstall"
  register: uninstall_ipa
  when: force_uninstall_ipa and ipa_installation.rc == 0

- name: Running the ipa-server-install
  ansible.builtin.command: >
    ipa-server-install
    --unattended
    --no-host-dns
    --realm "{{ freeipa_realm_name }}"
    --domain "{{ freeipa_domain_name }}"
    -a "{{ freeipa_admin_password }}"
    -p "{{ freeipa_dm_password }}"
    --hostname "{{ ansible_fqdn }}"
    --ip-address "{{ ansible_default_ipv4['address'] | default(ansible_all_ipv4_addresses[0]) }}"
    {{ '--idstart=' + freeipa_idstart if freeipa_idstart is defined }}
    {{ '--idmax=' + freeipa_idmax if freeipa_idmax is defined }}
    {{ '--setup-dns --auto-reverse --allow-zone-overlap --forward-policy first' if freeipa_setup_dns }}
    {{ dns_zone_manager if freeipa_dns_zone_mgr is defined }}
    {{ '--no-ntp' if not freeipa_setup_ntp }}
    {% if freeipa_setup_dns and freeipa_dns_forwarder|default([])|length %}
      {% for i in range(0,(freeipa_dns_forwarder|length)) %}
      --forwarder={{ freeipa_dns_forwarder[i] }}
      {% endfor %}
    {% else %}
      --no-forwarders
    {% endif %}
  when: ipa_installation.rc != 0 or force_uninstall_ipa

- name: Add FreeIPA hostname entry in base machine
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ ansible_default_ipv4['address'] }}    {{ ansible_fqdn }}    {{ ansible_hostname }}"
    regexp: "{{ ansible_fqdn }}"
    state: present
  delegate_to: localhost
  vars:
    ansible_connection: local

- name: Initialize IPA admin credentials
  ansible.builtin.command: bash -c "echo '{{ freeipa_admin_password }}' | kinit admin"
  when: ipa_installation.rc == 0

- name: Modify max global password policy to 20000 days
  ansible.builtin.command: ipa pwpolicy-mod global_policy --minlife=0 --maxlife=20000
  when: ipa_installation.rc == 0

- name: Modify default shell to /bin/bash
  ansible.builtin.command: ipa config-mod --defaultshell=/bin/bash
  when: ipa_installation.rc == 0
